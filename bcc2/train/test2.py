# -*- coding: utf-8 -*-
import safetensors
import math
import torch
from transformers import AutoConfig,AutoTokenizer
from modeling_bertchunke_zh import BertChunker
model_path='/data/bc-chinese-2/newline_750k/checkpoint-115200'
# load config and tokenizer
config = AutoConfig.from_pretrained(
    model_path,
    trust_remote_code=True,
)
tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    padding_side="right",
    model_max_length=config.max_position_embeddings,
    trust_remote_code=True,
)

# initialize model
model = BertChunker(config)
device='cpu' # or 'cuda'
model.to(device)

# load tim1900/bert-chunker-chinese/model.safetensors
state_dict = safetensors.torch.load_file(model_path+"/model.safetensors")
model.load_state_dict(state_dict)

def chunk_text(model, text, tokenizer, prob_threshold=0.5):
    # slide context window chunking
    MAX_TOKENS = 512
    tokens = tokenizer(text, return_tensors="pt", truncation=False)
    input_ids = tokens["input_ids"]
    attention_mask = tokens["attention_mask"][:, 0:MAX_TOKENS]
    attention_mask = attention_mask.to(model.device)
    CLS = input_ids[:, 0].unsqueeze(0)
    SEP = input_ids[:, -1].unsqueeze(0)
    input_ids = input_ids[:, 1:-1]
    model.eval()
    split_str_poses = []
    token_pos = []
    windows_start = 0
    windows_end = 0
    logits_threshold = math.log(1 / prob_threshold - 1)
    print(f"Processing {input_ids.shape[1]} tokens...")
    while windows_end <= input_ids.shape[1]:
        windows_end = windows_start + MAX_TOKENS - 2

        ids = torch.cat((CLS, input_ids[:, windows_start:windows_end], SEP), 1)

        ids = ids.to(model.device)

        output = model(
            input_ids=ids,
            attention_mask=torch.ones(1, ids.shape[1], device=model.device),
        )
        logits = output["logits"][:, 1:-1, :]
        chunk_decision = logits[:, :, 1] > (logits[:, :, 0] - logits_threshold)
        greater_rows_indices = torch.where(chunk_decision)[1].tolist()

        # null or not
        if len(greater_rows_indices) > 0 and (
            not (greater_rows_indices[0] == 0 and len(greater_rows_indices) == 1)
        ):

            split_str_pos = [
                tokens.token_to_chars(sp + windows_start + 1).start
                for sp in greater_rows_indices
                if sp > 0
            ]
            token_pos += [
                sp + windows_start + 1 for sp in greater_rows_indices if sp > 0
            ]
            split_str_poses += split_str_pos

            windows_start = greater_rows_indices[-1] + windows_start

        else:

            windows_start = windows_end

    substrings = [
        text[i:j] for i, j in zip([0] + split_str_poses, split_str_poses + [len(text)])
    ]
    token_pos = [0] + token_pos
    return substrings, token_pos
# text to be chunked 
text='''起点中文网(www.qidian.com)创立于2002年5月，是国内知名的原创\n\n文学 网站，隶属于阅文集团  \n  旗下。起点中文 网以推动中国  原创文学事业为宗旨，长期致力于原创文学作者的挖掘与培养，并取得了巨大成果：2003年10月，起点中文网开启“在线收费阅读”服务，成为真正意义上的网络文学赢利模式的先锋之一，就此奠定了原创文学的行业基础。此后，起点又推出了作家福利、文学交互、内容发掘推广、版权管理等机制和体系，为原创文学的发展注入了巨大活力，有力推动了中国文学原创事业的发展。在清晨的微光中，一只孤独的猫头鹰在古老的橡树上低声吟唱，它的歌声如同夜色的回声，穿越了时间的迷雾。树叶在微风中轻轻摇曳，仿佛在诉说着古老的故事，每一\\$#%#3 \n 个音符都带着\njkdadw\n 森林  的秘密。一位年轻的程序员正专注地敲打着键盘，代码的海洋在他眼前展开。他的手指在键盘上飞舞，如同钢琴家在演奏一曲复杂的交响乐。屏幕上的光标闪烁，仿佛在等待着下一个指令，引领他进入未知的数字世界。'''
# text='''“小说”一词最早出现于《庄子·外物》：「饰小说以干县令，其于大达亦远矣。」庄子所谓的「小说」，是指琐碎的言论，与小说观念相差甚远。直至东汉桓谭《新论》：「小说家合残丛小语，近取譬喻，以作短书，治身理家，有可观之辞。」班固《汉书·艺文志》将「小说家」列为十家之后，其下的定义为：「小说家者流，盖出于稗官，街谈巷语，道听途说者之所造也。」才稍与小说的意义相近。而中国小说最大的特色，便自宋代开始具有文言小说与白话小说两种不同的小说系统。文言小说起源于先秦的街谈巷语，是一种小知小道的纪录。在历经魏晋南北朝及隋唐长期的发展，无论是题材或人物的描写，文言小说都有明显的进步，形成笔记与传奇两种小说类型。而白话小说则起源于唐宋时期说话人的话本，故事的取材来自民间，主要表现了百姓的生活及思想意识。但不管文言小说或白话小说都源远流长，呈现各自不同的艺术特色。”。'''

text=r'''二舅是我家亲戚中的怪人。二舅琴棋书画样样精通，才华横溢，生活中却笨手笨脚。传说二舅年轻时英俊潇洒，现实中的他却普普通通，甚至有些邋遢。我见到二舅时他已经老了。二舅一生未娶，即便是亲友聚会也难得见到他的身影。也许我与二舅有缘，毕业后我留在了城市，暂且寄居在姥姥留下的老房子里。这样，我就经常有机会与住在后院的二舅打交道了。那年冬天，二舅滑倒摔坏了股骨头。我先是背他回屋，后来又送他去医院，那之后我们的关系发生了改变。二舅出院后经常叫我陪他喝酒，他酒量不大，但酒瘾很大。我陪二舅“喝两口”的时候，他会讲一些陈年旧事，比如早年在县城的博物馆整理文物，他教过谁鉴定文物，谁还拜他为师。他说的那人可是个了不起的大名人，如今已成大师，风光多年，而二舅却默默无闻。我当然不能驳他的面子，说他吹牛。二舅很聪明，从我的眼神里看出了怀疑，主动回答：“你认为二舅在吹牛吗？二舅说的都是实话，有据为证。”说着他从覆满灰尘的书堆里翻找起一封信。二舅说那封信是大师写给自己的，里面涉及请教和致谢的内容。可惜，他找了半天也没找到。对此，我半信半疑。一次酒后，二舅说了一件更超乎我想象的事情。他说他有儿子，并且，有三个儿子。二舅还说孩子的母亲是唐朝公主，绝对的大美女！我顿时目瞪口呆。二舅说：“你认为二舅在吹牛吗？二舅说的都是实话，有据为证。”等了好一会儿，我问：“凭据呢？”二舅说：“在博物馆呢。”二舅说他年轻时在县城那家博物馆里修复珍藏的字画，吃住都在那个泛着霉味的大房子里。有时忙起来昏天黑地，不知白天何时遁去，也不知黑夜何时降临。有一天，画里那位公主突然现身，对他痴痴地笑。他不知道自己身处现实还是梦中，反正情不自禁，频繁地和公主会面，并定期幽会。他们吟诗作画、琴瑟和鸣；他们月下对饮，红烛帷幔。他们整整幽会了十年。'''

text_phone=r'''今年1月，国家发展改革委和财政部发布关于2025年加力扩围实施大规模设备更新和消费品以旧换新政策的通知，要求“加力推进设备更新”“扩围支持消费品以旧换新”。

　　春节过后，各地持续加力实施“两新”政策，不断激发消费新活力。记者走进商场、企业，探访“两新”政策对经济社会发展带来的新动能。

　　自1月20日起，手机等数码产品国补政策在各地陆续落地，全国消费市场迎来一波“换机热”。

图片
　　商务部全国家电以旧换新及手机等数码产品购新数据平台显示，截至2月8日，全国手机等数码产品购新补贴申请人数已突破2000万。

　　记者走访中，多家手机门店店员表示，政策落地后，参与“国补”的产品销量增长明显，“大部分消费者目标明确，进店直奔参加补贴的产品”“消费者对‘支付立减’的透明规则比较认可”。

图片
　　在加力推进设备更新方面，通知指出，增加超长期特别国债支持重点领域设备更新的资金规模。对符合有关条件经营主体设备更新相关的银行贷款本金，在中央财政贴息1.5个百分点基础上，国家发展改革委安排超长期特别国债资金进行额外贴息，进一步降低经营主体设备更新融资成本。'''

text=r'''财联社2月21日讯（编辑 马兰）日本汽车制造商日产近日“犹如困兽”，在与竞争对手本田的合并谈判破裂后，其未来发展已成投资人的心病。评级公司穆迪下调了日产的信用评级至垃圾级，理由是日产的信用状况不佳且前景继续恶化。其补充称，预计日产汽车业务的自由现金流将从本财年（截至今年3月）转为负值，并将在新的财年继续保持赤字。然而，事情仍有转机。日产公司高层正在制定计划，希望引入特斯拉作为日产的战略投资者，因为这笔交易可以使特斯拉获得日产在美国的生产工厂，可以帮助特斯拉规避美国总统特朗普的关税风险。据悉，这项提议由特斯拉前董事会成员Hiro Mizuno提出，得到了包括前日本首相菅义伟等日产董事会成员的支持。该提议设想成立一个投资者财团，以特斯拉为主，但也允许其他企业进行少数股权投资。有吸引力的交易  在日产放弃与本田合并之后，苹果供应商鸿海集团曾表达过收购意愿，以进一步实现鸿海的汽车代工梦想。然而这一计划引发日本方面的担忧，并促使日产萌发引入特斯拉的强烈愿望。据另外两位知情人士透露，日产早已开始在科技行业寻找战略合作伙伴，一些董事会成员认为特斯拉和苹果是理想目标。但截至目前，特斯拉并未表现出明显的兴趣。特斯拉是全球最有价值的公司之一，而从历史上看，特斯拉从未投资过其他汽车公司，且该公司正在将重点和投资转向自动驾驶和机器人技术，这意味着投资日产可能不会是特斯拉的优先策略。不过，日产的优势也很明确。其在美国田纳西州和密西西比州拥有两家装配厂，年总产能约为100万辆汽车。特斯拉可以利用这两家在美国本土生产和组装的汽车工厂，扩大自身产能，以免进口车辆从而受特朗普的关税惩罚。在高层希望吸引特斯拉投资的消息曝出后，日产周五股价大涨，截至发稿，其涨幅约为10%，凸显出投资人对这一策略的看好。'''
text_tg=r'''研发人员介绍，机器人母平台可以作为一个基础平台，扩展出更多的功能。比如更换安装更为精巧的机械臂、更为智能的头部等。在机器人的胸腔内，还留存了足够的空间，方便它扩展电池续航和运算能力。目前，“天工”正在进行持续的迭代和开发，并且拥有了多项技术突破。

图片

近期“天工”又掌握了哪些新本领？

要实现诸多技艺有什么难度？

人形机器人能帮我们干哪些活？

 
“天工”最近有了哪些新本领？

此前，人形机器人“天工”已经可以稳定行走、奔跑、翻越障碍等，甚至还在学习如何惟妙惟肖模仿人体形态。经过不断学习迭代，人形机器人“天工”最近又掌握了哪些新本领呢？

最近，“天工”人形机器人在户外真实地形测试中，成功登上北京通州区海子墙公园最高点，实现了100多个台阶的连续攀爬，成为全球首例可在室外连续攀爬多级阶梯的人形机器人。

图片

图片

借助具身“大脑”和具身“小脑”，“天工”机器人能够在行进中精准识别前方地形，并实时调整全身动作和步态，在沙地、雪地、山坡等多种复杂地形中实现高速奔跑，奔跑速度已经由最初的每小时6公里提升至每小时12公里。

 
“天工”如何实现攀登百级台阶？

那么，人形机器人要实现攀登百级台阶 ，具体都有哪些难度呢？“天工”又是怎么实现的呢？攀登百级台阶，“天工”都有哪些好帮手？

无磕碰、不踩棱、不踏空，在北京的一个公园内，“天工”平稳攀登了134级台阶，这些台阶的高度不一，台阶缝隙甚至还存在破损和松动，对人来说都会有一定攀爬难度，“天工”是怎么实现的呢？

图片

人形机器人“天工”之所以能实现户外场景攀爬100多级台阶的本领，主要依赖于它新增加的两个装备。

在它的头部有一个激光雷达↓

图片

而在它的腹部也就是人类肚脐眼的位置，增加了一个摄像头↓

图片

这样的两个装备组合在一起，就为“天工”打开了一个新的视觉的眼睛，通过对周围环境视觉信号的实时捕捉，可以让“天工”在复杂的环境过程中自主进行识别和行动。

图片

“天工”顺利实现了依靠视觉融合感知进行上下台阶。视觉的融入，相当于给机器人又增加一层复杂的数据输入，他们要在极短时间内，完成计算和运动控制，决策和行动时往往“失之毫厘，谬以千里。”

团队介绍，我们看到的人形机器人大多是不具备视觉感知能力的“盲人”。这些没有视觉感知能力的机器人要依靠提前建模，迈出固定步幅去上台阶，或者依赖仿真训练的经验，尝试碰触障碍物的位置，再去判断如何迈步，在一些陌生场景下，踏空摔倒就很常见了。

图片

国地共建具身智能机器人创新中心天工项目人员 魏嘉星：对于人形机器人来说，要做到稳定的感知行走，其实对于它的整个计算能力是有非常高的要求的，要保持50毫秒以内的高频率视觉更新。同时我们会把视觉感知的一些信息和本体信息，在虚拟仿真训练的世界里进行部署。部署好了之后，会有成百上千台机器人结合这种算法进行优化和迭代。我们把效果训练好之后，再部署到真实物理世界的机器人身上，就可以让它具备一个很好的感知行走能力了。

 
"天工"是依靠"眼睛"来看路吗？

人形机器人“天工”其中一只眼睛在肚脐的位置，这是为什么呢？另外，“天工”的运动过程中，是单纯依靠这些眼睛来看路的吗？

之所以把摄像头放在了机器人的“肚脐眼儿”上，是为了能够让摄像头更好看清脚向前行进的道路。

图片

但即便如此，它所能获取的环境信息还是十分有限。

图片

国地共建具身智能机器人创新中心 天工项目人员 魏嘉星：我们的信息可能还是不够的，因为人形机器人在行走的过程中，还会摆动它的身体、手部或者腿部，也会对信息有一定的遮挡。我们通过对于运动算法的突破，能够让机器人从有限的信息，推测出更多全面的信息，从而实现它稳定的感知行走。

 
“天工”如何实现雪地奔跑？

除了普通路况，您知道“天工”是如何应对特殊天气和路况的吗？比如如何实现雪地奔跑？应对复杂地形的移动能力提升，将成为人形机器人走出实验室，在真实环境执行任务，甚至在山地、雪地救援、废墟等极端环境下作业的基础。

目前“天工”的最大奔跑时速已提高至12千米。在雪地进行高速奔跑，环境松软湿滑，对于机器人来说并不容易。

图片

研究人员表示，他们会在虚拟仿真场景下，给机器人注入一段短时记忆，让机器人能够知道，在特殊环境和情况下，如何更好进行本体的自我控制。

 
人形机器人如何变身电力巡检员？

随着技术不断突破，人形机器人愈加成为人类的好帮手。一起来看看“天工”是如何变身电力巡检员的。

只见“天工”走进配电室，手持超声波低电波局部放电检测仪，对多台电柜进行多点位局部放电检测，高效完成巡检任务。同时还能顺利完成合闸、分闸等操作任务。

图片

发挥如此稳定的“天工”，在日常训练中，也要面对很多不稳定的场景，增加它的抗干扰性。比如重达10公斤的大球，直接砸在“天工”身上，它简单调整步伐，很快就站稳了脚步。之所以做这种击打训练，目的就是让机器人在面对任何一种突如其来的冲击，如大风天气等，依然能够稳稳执行任务。

免责声明：本内容来自腾讯平台创作者，不代表腾讯新闻或腾讯网的观点和立场'''


text_tiger='''陈灿培收藏室里的飞虎队军服。 受访者供图

今年是中国人民抗日战争暨世界反法西斯战争胜利80周年。第二次世界大战期间，飞虎队的故事传颂了中美并肩抗战的壮举，浓缩着中美守望相助的情谊。

今天，为了让更多人铭记这段历史，中美两国民间人士、广大华侨华人积极行动，有的收集飞虎队相关文物，并无偿捐赠给博物馆；有的着手开展相关纪念活动。这些文物如何收集而来？背后有何鲜为人知的故事？本期我们讲述一位美籍华人收藏家的故事。

——编者

这些天，美国知名华人收藏家、美国飞虎队研究院院长陈灿培博士，正在为一个飞虎队相关的论坛进行紧锣密鼓的准备工作。

从2007年开始，陈灿培着手收集、捐赠飞虎队文物。去年，他捐赠的飞虎队系列实物入选“共和国印记”见证物，他也被评为“华侨文物百佳讲述人”。在中国人民抗日战争暨世界反法西斯战争胜利即将迎来80周年之际，这位已近耄耋之年的老人表示，自己只是做了一个华人该做的，能够给这些文物找到“家”，是他在收藏之路上最开心的事。

他是别人眼中的“虎痴”——

无偿捐出飞虎队文物万余件

“飞虎队实物的价值在于其历史意义。”陈灿培说，比如一名飞虎队队员当时签订的合同，这是一份历史性的文件，见证了世界反法西斯战争一步步走向胜利，“当时我买这份合同花了9000美元，有的人说我是傻瓜，花这么多钱买一张纸，我认为我买的不是纸，而是历史，从这个意义看这个价格其实很便宜。”

飞虎队队员们的军装、徽章、老照片和家书等“老物件”，这些属于二战时期的历史文物，是陈灿培眼里的宝贝。从2007年算起，陈灿培每月花费1万至2万美元购买飞虎队文物，至今已有上百万美元。

作为美国收藏界中对飞虎队文物情有独钟的“虎痴”，陈灿培至今已无偿捐出飞虎队、抗战及华侨等文物约2万件，接受捐赠的既有中国的国家图书馆、国家博物馆、湖南芷江飞虎队纪念馆等39家文博馆，又有美国的夏威夷珍珠港航空博物馆、陈纳德航空与军事博物馆、南加州华人历史学会等14家机构。

这些文物不仅反映了飞虎队队员英勇战斗的历史，也展示了中美在二战期间的紧密合作。例如，在重庆抗战遗址博物馆，陈灿培捐赠了600余件文物，其中包括枪械、军服及个人日常用品等国家一级文物12件。他捐赠给国家博物馆的158件套飞虎队文物中，有飞虎队队员的导航包、服役记录、航空奖章、飞行证章以及印有七国文字的救助血符等物品。难能可贵的是，每一件文物都有出处，这对于收藏或展出来说非常有意义。

和一般收藏家不同，陈灿培收集完文物后很快将其捐出。“我最高兴的是看见自己收集的东西被展览出来。”陈灿培说，每一件捐赠的文物都承载着深厚的历史意义，它们不仅记录了过去，更是人们与未来世代对话的桥梁。“这些飞虎队文物见证了中美两国在二战时期的互动与合作，有助于推动中美关系友好发展。”

两个渠道收藏文物——

朋友相赠和网上购买

陈灿培祖籍广东番禺，1946年，他出生在中国澳门一个中医世家，后来赴美留学、工作。凭借高超医术，他在洛杉矶开办的诊所达11家。当白霜慢慢爬上双鬓，已经事业有成的他想在有生之年做些更有意义的事。

“虽然我从小就知道飞虎队的故事，但是开始收藏飞虎队文物源于一次偶然的机会。”陈灿培说，大约20年前，当地一位美国飞虎队老兵家属找到他，“这位老兵离世后，留下两件飞虎队军装，他的妻子询问我是否需要，我说飞虎队的军装当然要了。”看着保存完好的军装，他感到自己的心仿佛照进了一束光：“我相信这就是我一直追寻的有意义的事情。”从那时起，他开始拿出积蓄，收集飞虎队文物。

陈灿培收集飞虎队文物的渠道有两个，一个是朋友相赠，另一个是在网上购买。开始这项收藏后，他告知在美国的亲戚朋友及其熟识的人，只要家里有相关的物品就一定要找他。一些飞虎队老兵得知消息后，主动将多年收藏的东西送给他，这让陈灿培感动不已。一次，一位飞虎队老兵打来电话，要赠送他数枚奖章，其中包括一枚珍贵的铜章。陈灿培说，这位老兵跟我说，这些奖章都是他用命换来的，他要把这些东西捐出来，就是为了留一个名。

很少有收藏家会夸口说没收到过赝品，陈灿培也是如此。刚开始网购时，他对飞虎队文物不太熟悉，很难辨别真假。几次下来，他发现其中有不少赝品，或是买贵了，浪费了许多钱。为此，他遍查飞虎队材料、多方请教，后来几乎一看一摸就能够辨别真伪。

在陈灿培的收藏室里，文物搜集得越来越多。一次，几名从到中国访问的朋友返美后告诉他一个消息：在中国湖南芷江的飞虎队纪念馆，只有关于飞虎队的图片，没有实物。望着收藏室里布满岁月痕迹的文物，他陷入了沉思。

“要想让更多人了解飞虎队的历史，我必须给这些文物找一个合适的家。”陈灿培说，他后来亲自到芷江查看，发现果然如此，就向当地纪念馆捐赠数千件文物。之后，他又陆续向昆明、江门等地的文博机构无偿捐赠多批飞虎队藏品。

为了让家人理解他的做法，陈灿培每次捐赠都会带着妻子一起前往中国的博物馆，并且自己亲自携带文物，从未造成损坏。他说：“我跟妻子一般拿4个旅行箱，但是最多的一次，我们两人拿了10个箱子。”

他会将收藏延续下去——

让血与火铸造的友谊代代相传

“中美关系希望在人民，基础在民间，未来在青年，活力在地方。”陈灿培对这句话十分赞同。他说，除了捐赠飞虎队文物，这些年，他在中美两国民间还做了一些促进双方文化交流的事情，都能深切感受到两国人民的友善。

当年陈纳德率领的2000多名飞虎队队员中，有九成左右的美籍华裔，其中多数是从广东赴美华人的后裔。2007年10月，陈灿培和妻子带着11位年逾八旬的美国飞虎队华人老兵来到中国，探访他们当年曾经战斗过的地方。“每到一处，我们都受到像是英雄一样的尊敬，这让我觉得很感动。”陈灿培说，在他的建议下，这些老兵还携带了当年获得的勋章、穿过的军服和使用过的军事手册等600多件飞虎队旧物，这些物品均被捐给了当地博物馆。

今年春节刚过，为纪念中国人民抗日战争暨世界反法西斯战争胜利80周年，陈灿培已着手准备举办飞虎队相关主题的论坛、展览等活动。“我们不仅将邀请中国重庆、昆明等地的飞虎队博物馆来展览，还会邀请美国的飞虎队团体、退伍老兵，在美国的华侨华人团体参加，我们还将推动中美友好城市合作举办相关纪念活动。”他说。

谈及未来，陈灿培说他会将收集飞虎队文物这个爱好延续下去。“我和飞虎队结缘是一个缘分。”他说，在中国澳门出生、成长，在美国工作、生活，这也是缘分。希望将飞虎队这段承载着中美友谊的历史保留下来，让血与火铸造的友谊代代相传。“这是双赢的事。不管是二战时期，还是现在，还有将来，都是一样。”他说。'''
text_old='''起点中文网(www.qidian.com)创立于2002年5月，是国内知名的原创文学网站，隶属于阅文集团旗下。起点中文网以推动中国原创文学事业为宗旨，长期致力于原创文学作者的挖掘与培养，并取得了巨大成果：2003年10月，起点中文网开启“在线收费阅读”服务，成为真正意义上的网络文学赢利模式的先锋之一，就此奠定了原创文学的行业基础。此后，起点又推出了作家福利、文学交互、内容发掘推广、版权管理等机制和体系，为原创文学的发展注入了巨大活力，有力推动了中国文学原创事业的发展。在清晨的微光中，一只孤独的猫头鹰在古老的橡树上低声吟唱，它的歌声如同夜色的回声，穿越了时间的迷雾。树叶在微风中轻轻摇曳，仿佛在诉说着古老的故事，每一个音符都带着森林的秘密。一位年轻的程序员正专注地敲打着键盘，代码的海洋在他眼前展开。他的手指在键盘上飞舞，如同钢琴家在演奏一曲复杂的交响乐。屏幕上的光标闪烁，仿佛在等待着下一个指令，引领他进入未知的数字世界。'''
text_doc='''4. 更多控制流工具
*****************

除了刚介绍的 "while" 语句，Python 还用了一些别的。我们将在本章中遇到它
们。


4.1. "if" 语句
==============

最让人耳熟能详的语句应当是 "if" 语句：

   >>> x = int(input("Please enter an integer: "))
   Please enter an integer: 42
   >>> if x < 0:
   ...     x = 0
   ...     print('Negative changed to zero')
   ... elif x == 0:
   ...     print('Zero')
   ... elif x == 1:
   ...     print('Single')
   ... else:
   ...     print('More')
   ...
   更多

可有零个或多个 "elif" 部分，"else" 部分也是可选的。关键字 '"elif"' 是
'else if' 的缩写，用于避免过多的缩进。"if" ... "elif" ... "elif" ...
序列可以当作其它语言中 "switch" 或 "case" 语句的替代品。

如果是把一个值与多个常量进行比较，或者检查特定类型或属性，"match" 语句
更有用。详见 match 语句。


4.2. "for" 语句
===============

Python 的 "for" 语句与 C 或 Pascal 中的不同。Python 的 "for" 语句不迭
代算术递增数值（如 Pascal），或是给予用户定义迭代步骤和结束条件的能力
（如 C），而是在列表或字符串等任意序列的元素上迭代，按它们在序列中出现
的顺序。 例如（这不是有意要暗指什么）：

   >>> # 度量一些字符串：
   >>> words = ['cat', 'window', 'defenestrate']
   >>> for w in words:
   ...     print(w, len(w))
   ...
   cat 3
   window 6
   defenestrate 12

很难正确地在迭代多项集的同时修改多项集的内容。更简单的方法是迭代多项集
的副本或者创建新的多项集：

   # 创建示例多项集
   users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}

   # 策略：迭代一个副本
   for user, status in users.copy().items():
       if status == 'inactive':
           del users[user]

   # 策略：创建一个新多项集
   active_users = {}
   for user, status in users.items():
       if status == 'active':
           active_users[user] = status


4.3. "range()" 函数
===================

内置函数 "range()" 用于生成等差数列：

   >>> for i in range(5):
   ...     print(i)
   ...
   0
   1
   2
   3
   4

生成的序列绝不会包括给定的终止值；"range(10)" 生成 10 个值——长度为 10
的序列的所有合法索引。range 可以不从 0 开始，且可以按给定的步长递增（
即使是负数步长）：

   >>> list(range(5, 10))
   [5, 6, 7, 8, 9]

   >>> list(range(0, 10, 3))
   [0, 3, 6, 9]

   >>> list(range(-10, -100, -30))
   [-10, -40, -70]

要按索引迭代序列，可以组合使用 "range()" 和 "len()"：

   >>> a = ['Mary', 'had', 'a', 'little', 'lamb']
   >>> for i in range(len(a)):
   ...     print(i, a[i])
   ...
   0 Mary
   1 had
   2 a
   3 little
   4 lamb

不过大多数情况下 "enumerate()" 函数很方便，详见 循环的技巧。

如果直接打印一个 range 会发生意想不到的事情：

   >>> range(10)
   range(0, 10)

"range()" 返回的对象在很多方面和列表的行为一样，但其实它和列表不一样。
该对象只有在被迭代时才一个一个地返回所期望的列表项，并没有真正生成过一
个含有全部项的列表，从而节省了空间。

这种对象称为可迭代对象 *iterable*，适合作为需要获取一系列值的函数或程
序构件的参数。"for" 语句就是这样的程序构件；以可迭代对象作为参数的函数
例如 "sum()"：

   >>> sum(range(4))  # 0 + 1 + 2 + 3
   6

之后我们会看到更多返回可迭代对象，或以可迭代对象作为参数的函数。在 数
据结构 这一章中，我们将讨论 "list()" 的更多细节。


4.4. "break" 和 "continue" 语句
===============================

"break" 语句将跳出最近的一层 "for" 或 "while" 循环:

   >>> for n in range(2, 10):
   ...     for x in range(2, n):
   ...         if n % x == 0:
   ...             print(f"{n} equals {x} * {n//x}")
   ...             break
   ...
   4 equals 2 * 2
   6 equals 2 * 3
   8 equals 2 * 4
   9 equals 3 * 3

'''
text_doc2=r'''9. 类
*****

类提供了把数据和功能绑定在一起的方法。创建新类时创建了新的对象 *类型*
，从而能够创建该类型的新 *实例*。实例具有能维持自身状态的属性，还具有
能修改自身状态的方法（由其所属的类来定义）。

和其他编程语言相比，Python 的类只使用了很少的新语法和语义。Python 的类
有点类似于 C++ 和 Modula-3 中类的结合体，而且支持面向对象编程（OOP）的
所有标准特性：类的继承机制支持多个基类、派生的类能覆盖基类的方法、类的
方法能调用基类中的同名方法。对象可包含任意数量和类型的数据。和模块一样
，类也支持 Python 动态特性：在运行时创建，创建后还可以修改。

如果用 C++ 术语来描述的话，类成员（包括数据成员）通常为 *public* （例
外的情况见下文 私有变量），所有成员函数都为 *virtual* 。与 Modula-3 中
一样，没有用于从对象的方法中引用本对象成员的简写形式：方法函数在声明时
，有一个显式的第一个参数代表本对象，该参数由方法调用隐式提供。与在
Smalltalk 中一样，Python 的类也是对象，这为导入和重命名提供了语义支持
。与 C++ 和 Modula-3 不同，Python 的内置类型可以用作基类，供用户扩展。
此外，与 C++ 一样，具有特殊语法的内置运算符（算术运算符、下标等）都可
以为类实例重新定义。

由于缺乏关于类的公认术语，本章中偶尔会使用 Smalltalk 和 C++ 的术语。本
章还会使用 Modula-3 的术语，Modula-3 的面向对象语义比 C++ 更接近
Python，但估计听说过这门语言的读者很少。


9.1. 名称和对象
===============

对象之间相互独立，多个名称（甚至是多个作用域内的多个名称）可以绑定到同
一对象。这在其他语言中通常被称为别名。Python 初学者通常不容易理解这个
概念，处理数字、字符串、元组等不可变基本类型时，可以不必理会。但是，对
于涉及可变对象（如列表、字典，以及大多数其他类型）的 Python 代码的语义
，别名可能会产生意料之外的效果。这样做，通常是为了让程序受益，因为别名
在某些方面就像指针。例如，传递对象的代价很小，因为实现只传递一个指针；
如果函数修改了作为参数传递的对象，调用者就可以看到更改——无需像 Pascal
那样用两个不同的机制来传参。


9.2. Python 作用域和命名空间
============================

在介绍类前，首先要介绍 Python 的作用域规则。类定义对命名空间有一些巧妙
的技巧，了解作用域和命名空间的工作机制有利于加强对类的理解。并且，即便
对于高级 Python 程序员，这方面的知识也很有用。

接下来，我们先了解一些定义。

*namespace* （命名空间）是从名称到对象的映射。现在，大多数命名空间都使
用 Python 字典实现，但除非涉及到性能优化，我们一般不会关注这方面的事情
，而且将来也可能会改变这种方式。命名空间的例子有：内置名称集合（包括
"abs()" 函数以及内置异常的名称等）；一个模块的全局名称；一个函数调用中
的局部名称。对象的属性集合也是命名空间的一种形式。关于命名空间的一个重
要知识点是，不同命名空间中的名称之间绝对没有关系；例如，两个不同的模块
都可以定义 "maximize" 函数，且不会造成混淆。用户使用函数时必须要在函数
名前面加上模块名。

点号之后的名称是 **属性**。例如，表达式 "z.real" 中，"real" 是对象 "z"
的属性。严格来说，对模块中名称的引用是属性引用：表达式
"modname.funcname" 中，"modname" 是模块对象，"funcname" 是模块的属性。
模块属性和模块中定义的全局名称之间存在直接的映射：它们共享相同的命名空
间！ [1]

属性可以是只读的或者可写的。 在后一种情况下，可以对属性进行赋值。 模块
属性是可写的：你可以写入 "modname.the_answer = 42" 。  也可以使用
"del" 语句删除可写属性。 例如，"del modname.the_answer" 将从名为
"modname" 对象中移除属性 "the_answer"。

命名空间是在不同时刻创建的，且拥有不同的生命周期。内置名称的命名空间是
在 Python 解释器启动时创建的，永远不会被删除。模块的全局命名空间在读取
模块定义时创建；通常，模块的命名空间也会持续到解释器退出。从脚本文件读
取或交互式读取的，由解释器顶层调用执行的语句是 "__main__" 模块调用的一
部分，也拥有自己的全局命名空间。内置名称实际上也在模块里，即
"builtins" 。
'''
chunks, token_pos = chunk_text(model, text_doc2, tokenizer, prob_threshold=0.5)

# print chunks
for i, (c, t) in enumerate(zip(chunks, token_pos)):
    print(f"-----chunk: {i}----token_idx: {t}--------")
    print(c)